name: Update OpenCode

on:
  repository_dispatch:
    types:
      [
        opencode-release-detected,
      ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Setup Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Install nix-update
        run: nix profile add nixpkgs#nix-update

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Step 1 - Update Version and Source Hash
        run: |
          echo "▶ Updating version with nix-update..."
          nix-update --flake opencode --version=auto || true

          VERSION=$(grep -oP 'version = "\K[^"]+' package.nix | head -1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "✓ Version set to: $VERSION"

          echo "▶ Constructing source URL..."
          SRC_URL="https://github.com/sst/opencode/archive/refs/tags/v${VERSION}.tar.gz"

          echo "▶ Prefetching source hash..."
          BASE32=$(nix-prefetch-url --unpack "$SRC_URL" --type sha256)
          SRI=$(nix hash convert --hash-algo sha256 --to sri "$BASE32")

          echo "▶ Writing source hash to package.nix..."
          sed -i -E "s|(hash = \")[^\"]*(\")|\\1$SRI\\2|" package.nix
          echo "✓ Source hash updated: $SRI"

      - name: Step 2 - Fix Go Vendor Hash
        run: |
          echo "▶ Setting dummy vendorHash..."
          DUMMY_VENDOR="sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
          sed -i -E "s|vendorHash = \"[^\"]*\"|vendorHash = \"$DUMMY_VENDOR\"|" package.nix

          echo "▶ Building TUI to discover correct vendorHash..."
          BUILD_LOG=$(nix build .#opencode.tui --system x86_64-linux -L 2>&1) || true

          CORRECT_HASH=$(echo "$BUILD_LOG" | grep -oP 'got:\s+\Ksha256-[A-Za-z0-9+/=]+' | tail -1)

          if [ -z "$CORRECT_HASH" ]; then
            echo "✗ Failed to extract vendorHash"
            echo "Last 100 lines of build log:"
            echo "$BUILD_LOG" | tail -100
            exit 1
          fi

          echo "▶ Writing correct vendorHash to package.nix..."
          sed -i -E "s|vendorHash = \"$DUMMY_VENDOR\"|vendorHash = \"$CORRECT_HASH\"|" package.nix
          echo "✓ Vendor hash updated: $CORRECT_HASH"

      - name: Step 3 - Fix node_modules x86_64-linux Output Hash
        run: |
          echo "▶ Setting dummy x86_64-linux node_modules outputHash..."
          DUMMY_B="sha256-BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB="
          sed -i -E "s|(x86_64-linux = \")[^\"]*(\")|\\1$DUMMY_B\\2|" package.nix

          echo "▶ Building node_modules to discover correct x86_64-linux outputHash..."
          BUILD_LOG=$(nix build .#opencode --system x86_64-linux -L 2>&1) || true

          CORRECT_HASH=$(echo "$BUILD_LOG" | grep -oP 'got:\s+\Ksha256-[A-Za-z0-9+/=]+' | head -1)

          if [ -z "$CORRECT_HASH" ]; then
            echo "✗ Failed to extract x86_64-linux node_modules hash"
            echo "$BUILD_LOG" | tail -100
            exit 1
          fi

          echo "▶ Writing x86_64-linux outputHash to package.nix..."
          sed -i -E "s|(x86_64-linux = \")[^\"]*(\")|\\1$CORRECT_HASH\\2|" package.nix
          echo "✓ x86_64-linux node_modules hash updated: $CORRECT_HASH"

      - name: Step 4 - Fix node_modules aarch64-linux Output Hash
        run: |
          echo "▶ Setting dummy aarch64-linux node_modules outputHash..."
          DUMMY_B="sha256-BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB="
          sed -i -E "s|(aarch64-linux = \")[^\"]*(\")|\\1$DUMMY_B\\2|" package.nix

          echo "▶ Building node_modules to discover correct aarch64-linux outputHash (emulated)..."
          BUILD_LOG=$(nix build .#opencode --system aarch64-linux -L 2>&1) || true

          CORRECT_HASH=$(echo "$BUILD_LOG" | grep -oP 'got:\s+\Ksha256-[A-Za-z0-9+/=]+' | head -1)

          if [ -z "$CORRECT_HASH" ]; then
            echo "✗ Failed to extract aarch64-linux node_modules hash"
            echo "$BUILD_LOG" | tail -100
            exit 1
          fi

          echo "▶ Writing aarch64-linux outputHash to package.nix..."
          sed -i -E "s|(aarch64-linux = \")[^\"]*(\")|\\1$CORRECT_HASH\\2|" package.nix
          echo "✓ aarch64-linux node_modules hash updated: $CORRECT_HASH"

      - name: Step 5 - Verification Build
        run: |
          echo "▶ Running final verification build for x86_64-linux..."
          nix build .#opencode --system x86_64-linux -L
          echo "✓ Build successful - all hashes are correct!"

      - name: Step 6 - Commit and Push Changes
        run: |
          echo "▶ Checking for changes to package.nix..."
          if ! git diff --quiet package.nix; then
            echo "✓ Changes detected. Committing and pushing..."
            git add package.nix
            git commit -m "Update OpenCode to ${{ env.VERSION }}" \
              -m "Automated hash updates for all architectures" \
              -m "- Source hash verified" \
              -m "- Go vendor hash verified" \
              -m "- Node modules hashes verified (x86_64 & aarch64)"
            
            git tag -f "v${{ env.VERSION }}"
            
            echo "▶ Synchronizing with remote branch..."
            git pull origin master --rebase
            
            echo "▶ Pushing changes to remote..."
            git push origin HEAD:master
            git push -f origin "v${{ env.VERSION }}"
            
            echo "✓ Update complete!"
          else
            echo "✓ No changes to package.nix. Repository is already up-to-date."
          fi
